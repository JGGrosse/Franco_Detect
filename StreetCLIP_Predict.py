from transformers import CLIPProcessor, CLIPModel
import numpy as np
import torch

# Load the fine-tuned CLIP model and processor
processor = CLIPProcessor.from_pretrained("openai/clip-vit-large-patch14-336")
model = CLIPModel.from_pretrained("geolocal/StreetCLIP")

classes = ['urban', 'rural']
scenery_descriptors = [f'A Street View photo from an {classe} location in France.'for classe in classes]
city_descriptions = ['Aix-en-Provence',
                    'Ajaccio',
                    'Amiens',
                    'Angers',
                    'Annecy',
                    'Antibes',
                    'Antony',
                    'Argenteuil',
                    'Asnieres-sur-Seine',
                    'Aubervilliers',
                    'Aulnay-sous-Bois',
                    'Avignon',
                    'Beauvais',
                    'Besancon',
                    'Beziers',
                    'Bordeaux',
                    'Boulogne-Billancourt',
                    'Bourges',
                    'Brest',
                    'Caen',
                    'Calais',
                    'Cannes',
                    'Cergy',
                    'Chambery',
                    'Champigny-sur-Marne',
                    'Chelles',
                    'Cherbourg-en-Cotentin',
                    'Clermont-Ferrand',
                    'Clichy',
                    'Colmar',
                    'Colombes',
                    'Courbevoie',
                    'Creteil',
                    'Dijon',
                    'Drancy',
                    'Dunkirk',
                    'Evry-Courcouronnes',
                    'Grenoble',
                    'Hyeres',
                    'Issy-les-Moulineaux',
                    'Ivry-sur-Seine',
                    'La Roche-sur-Yon',
                    'La Rochelle',
                    'La Seyne-sur-Mer',
                    'Le Blanc-Mesnil',
                    'Le Havre',
                    'Le Mans',
                    'Levallois-Perret',
                    'Lille',
                    'Limoges',
                    'Lorient',
                    'Lyon',
                    'Maisons-Alfort',
                    'Marseille',
                    'Meaux',
                    'Merignac',
                    'Metz',
                    'Montauban',
                    'Montpellier',
                    'Montreuil',
                    'Mulhouse',
                    'Nancy',
                    'Nanterre',
                    'Nantes',
                    'Narbonne',
                    'Neuilly-sur-Seine',
                    'Nice',
                    'Nimes',
                    'Noisy-le-Grand',
                    'Orleans',
                    'Pantin',
                    'Paris',
                    'Pau',
                    'Perpignan',
                    'Pessac',
                    'Poitiers',
                    'Quimper',
                    'Reims',
                    'Rennes',
                    'Roubaix',
                    'Rouen',
                    'Rueil-Malmaison',
                    'Saint-Etienne',
                    'Saint-Maur-des-Fosses',
                    'Saint-Nazaire',
                    'Sarcelles',
                    'Seine-Saint-Denis',
                    'Strasbourg',
                    'Toulon',
                    'Toulouse',
                    'Tourcoing',
                    'Tours',
                    'Troyes',
                    'Valence (Drome)',
                    'Venissieux',
                    'Versailles',
                    'Villejuif',
                    "Villeneuve-d'Ascq",
                    'Villeurbanne',
                    'Vitry-sur-Seine'
                    ]
country_descriptions = ['Ain',
                        'Aisne',
                        'Allier',
                        'Alpes-de-Haute-Provence',
                        'Alpes-Maritimes',
                        'Ardennes',
                        'Ardèche',
                        'Ariège',
                        'Aube',
                        'Aude',
                        'Aveyron',
                        'Bas-Rhin',
                        'Bouches-du-Rhône',
                        'Calvados',
                        'Cantal',
                        'Charente',
                        'Charente-Maritime',
                        'Cher',
                        'Corrèze',
                        'Corse-du-Sud',
                        'Creuse',
                        "Côte-d'Or",
                        "Côtes-d'Armor",
                        'Deux-Sèvres',
                        'Dordogne',
                        'Doubs',
                        'Drôme',
                        'Essonne',
                        'Eure',
                        'Eure-et-Loir',
                        'Finistère',
                        'Gard',
                        'Gers',
                        'Gironde',
                        'Haut-Rhin',
                        'Haute-Corse',
                        'Haute-Garonne',
                        'Haute-Loire',
                        'Haute-Marne',
                        'Haute-Savoie',
                        'Haute-Saône',
                        'Haute-Vienne',
                        'Hautes-Alpes',
                        'Hautes-Pyrénées',
                        'Hauts-de-Seine',
                        'Hérault',
                        'Ille-et-Vilaine',
                        'Indre',
                        'Indre-et-Loire',
                        'Isère',
                        'Jura',
                        'Landes',
                        'Loir-et-Cher',
                        'Loire',
                        'Loire-Atlantique',
                        'Loiret',
                        'Lot',
                        'Lot-et-Garonne',
                        'Lozère',
                        'Maine-et-Loire',
                        'Manche',
                        'Marne',
                        'Mayenne',
                        'Meurthe-et-Moselle',
                        'Meuse',
                        'Morbihan',
                        'Moselle',
                        'Nièvre',
                        'Nord',
                        'Oise',
                        'Orne',
                        'Pas-de-Calais',
                        'Puy-de-Dôme',
                        'Pyrénées-Atlantiques',
                        'Pyrénées-Orientales',
                        'Rhône',
                        'Sarthe',
                        'Savoie',
                        'Saône-et-Loire',
                        'Seine-et-Marne',
                        'Seine-Maritime',
                        'Seine-Saint-Denis',
                        'Somme',
                        'Tarn',
                        'Tarn-et-Garonne',
                        'Territoire de Belfort',
                        "Val-d'Oise",
                        'Val-de-Marne',
                        'Var',
                        'Vaucluse',
                        'Vendée',
                        'Vienne',
                        'Vosges',
                        'Yonne',
                        'Yvelines'
                        ]
arrondissements = {'Ain': ['Belley', 'Bourg-en-Bresse', 'Gex', 'Nantua'],
                  'Aisne': ['Château-Thierry',
                    'Laon',
                    'Saint-Quentin',
                    'Soissons',
                    'Vervins',
                    'Moulins',
                    'Clamecy',
                    'Castres'],
                  'Allier': ['Montluçon', 'Vichy'],
                  'Alpes-de-Haute-Provence': ['Barcelonnette',
                    'Castellane',
                    'Digne-les-Bains',
                    'Forcalquier'],
                  'Hautes-Alpes': ['Briançon', 'Gap'],
                  'Alpes-Maritimes': ['Grasse', 'Nice'],
                  'Ardèche': ['Largentière', 'Privas', 'Tournon-sur-Rhône', 'Prades'],
                  'Ardennes': ['Charleville-Mézières', 'Rethel', 'Sedan', 'Vouziers'],
                  'Ariège': ['Foix', 'Pamiers', 'Saint-Girons'],
                  'Aube': ['Bar-sur-Aube', 'Nogent-sur-Seine', 'Troyes'],
                  'Aude': ['Carcassonne', 'Limoux', 'Narbonne', 'Saint-Benoît'],
                  'Aveyron': ['Millau', 'Rodez', 'Villefranche-de-Rouergue'],
                  'Bouches-du-Rhône': ['Aix-en-Provence', 'Arles', 'Marseille', 'Istres'],
                  'Calvados': ['Bayeux', 'Caen', 'Lisieux', 'Vire'],
                  'Cantal': ['Aurillac'],
                  'Gironde': ['Mauriac',
                    'Blaye',
                    'Bordeaux',
                    'Langon',
                    'Lesparre-Médoc',
                    'Libourne',
                    'Arcachon'],
                  'Puy-de-Dôme': ['Saint-Flour',
                    'Ambert',
                    'Clermont-Ferrand',
                    'Issoire',
                    'Riom',
                    'Thiers'],
                  'Charente': ['Angoulême', 'Cognac', 'Confolens'],
                  'Charente-Maritime': ['Jonzac',
                    'Rochefort',
                    'Saintes',
                    "Saint-Jean-d'Angély"],
                  'Ogle County': ['Rochelle'],
                  'Cher': ['Bourges', 'Saint-Amand-Montrond', 'Vierzon'],
                  'Corrèze': ['Brive-la-Gaillarde', 'Tulle', 'Ussel'],
                  "Côte-d'Or": ['Beaune', 'Dijon', 'Montbard'],
                  "Côtes-d'Armor": ['Dinan', 'Guingamp', 'Lannion', 'Saint-Brieuc'],
                  'Orne': ['Aubusson', 'Alençon', 'Argentan', 'Mortagne-au-Perche'],
                  'Creuse': ['Guéret'],
                  'Dordogne': ['Bergerac', 'Nontron', 'Périgueux', 'Sarlat-la-Canéda', 'Blanc'],
                  'Doubs': ['Besançon', 'Montbéliard', 'Pontarlier'],
                  'Drôme': ['Die', 'Nyons'],
                  'Comarca de València': ['Valence'],
                  'Eure': ['Andelys', 'Bernay', 'Évreux'],
                  'Eure-et-Loir': ['Chartres', 'Châteaudun', 'Dreux', 'Nogent-le-Rotrou'],
                  'Finistère': ['Brest', 'Châteaulin', 'Morlaix', 'Quimper'],
                  'Corse-du-Sud': ['Ajaccio', 'Sartène'],
                  'Haute-Corse': ['Bastia', 'Corte', 'Calvi'],
                  'Gard': ['Alès', 'Nîmes'],
                  None: ['Vigan',
                    'Vienne',
                    'Paris',
                    'Basse-Terre',
                    'Pointe-à-Pitre',
                    'Fort-de-France',
                    'Trinité',
                    'Cayenne',
                    'Saint-Laurent-du-Maroni'],
                  'Haute-Garonne': ['Muret', 'Saint-Gaudens', 'Toulouse'],
                  'Gers': ['Auch', 'Condom', 'Mirande'],
                  'Hérault': ['Béziers', 'Lodève', 'Montpellier'],
                  'Ille-et-Vilaine': ['Fougères-Vitré', 'Redon', 'Rennes', 'Saint-Malo'],
                  'Indre': ['Châteauroux', 'Châtre', 'Issoudun'],
                  'Indre-et-Loire': ['Chinon', 'Tours', 'Loches'],
                  'Isère': ['Grenoble'],
                  'Savoie': ['Tour-du-Pin',
                    'Albertville',
                    'Chambéry',
                    'Saint-Jean-de-Maurienne'],
                  'Jura': ['Dole', 'Lons-le-Saunier', 'Saint-Claude'],
                  'Landes': ['Dax', 'Mont-de-Marsan'],
                  'Loir-et-Cher': ['Blois', 'Vendôme', 'Romorantin-Lanthenay'],
                  'Loire': ['Montbrison', 'Roanne', 'Saint-Étienne'],
                  'Haute-Loire': ['Brioude', 'Puy-en-Velay', 'Yssingeaux'],
                  'Loire-Atlantique': ['Nantes', 'Saint-Nazaire', 'Châteaubriant-Ancenis'],
                  'Loiret': ['Montargis', 'Orléans', 'Pithiviers'],
                  'Lot': ['Cahors', 'Figeac'],
                  'Saône-et-Loire': ['Gourdon',
                    'Autun',
                    'Chalon-sur-Saône',
                    'Charolles',
                    'Louhans',
                    'Mâcon',
                    'Mans'],
                  'Lot-et-Garonne': ['Agen', 'Marmande', 'Villeneuve-sur-Lot', 'Nérac'],
                  'Lozère': ['Florac', 'Mende'],
                  'Maine-et-Loire': ['Angers', 'Cholet', 'Saumur', 'Segré'],
                  'Manche': ['Avranches', 'Cherbourg', 'Coutances', 'Saint-Lô'],
                  'Marne': ['Châlons-en-Champagne', 'Épernay', 'Reims', 'Vitry-le-François'],
                  'Haute-Marne': ['Chaumont', 'Langres', 'Saint-Dizier'],
                  'Mayenne': ['Château-Gontier', 'Laval', 'Mayenne'],
                  'Meurthe-et-Moselle': ['Val-de-Briey', 'Lunéville', 'Nancy', 'Toul'],
                  'Meuse': ['Bar-le-Duc', 'Commercy', 'Verdun'],
                  'Morbihan': ['Lorient', 'Pontivy', 'Vannes'],
                  'Moselle': ['Forbach-Boulay-Moselle',
                    'Sarrebourg-Château-Salins',
                    'Sarreguemines',
                    'Thionville',
                    'Metz'],
                  'Nièvre': ['Château-Chinon (Ville)', 'Nevers', 'Cosne-Cours-sur-Loire'],
                  'Nord': ['Avesnes-sur-Helpe',
                    'Cambrai',
                    'Douai',
                    'Dunkerque',
                    'Lille',
                    'Valenciennes'],
                  'Oise': ['Beauvais', 'Clermont', 'Compiègne'],
                  'Pas-de-Calais': ['Senlis',
                    'Arras',
                    'Béthune',
                    'Boulogne-sur-Mer',
                    'Montreuil',
                    'Saint-Omer',
                    'Calais',
                    'Lens',
                    'Torcy',
                    'Saint-Georges'],
                  'Pyrénées-Atlantiques': ['Bayonne', 'Oloron-Sainte-Marie', 'Pau'],
                  'Hautes-Pyrénées': ['Argelès-Gazost', 'Bagnères-de-Bigorre', 'Tarbes'],
                  'Pyrénées-Orientales': ['Céret', 'Perpignan'],
                  'Bas-Rhin': ['Haguenau-Wissembourg',
                    'Molsheim',
                    'Saverne',
                    'Sélestat-Erstein',
                    'Strasbourg',
                    'Saint-Pierre',
                    'Saint-Pierre'],
                  'Haut-Rhin': ['Altkirch',
                    'Colmar-Ribeauvillé',
                    'Mulhouse',
                    'Thann-Guebwiller'],
                  'Métropole de Lyon': ['Lyon'],
                  'Rhône': ['Villefranche-sur-Saône'],
                  'Haute-Saône': ['Lure', 'Vesoul'],
                  "Suisse-Saxonne-Monts-Métallifères-de-l'Est": ['Flèche'],
                  'Sarthe': ['Mamers'],
                  'Haute-Savoie': ['Annecy', 'Saint-Julien-en-Genevois', 'Thonon-les-Bains'],
                  'Somme': ['Bonneville', 'Abbeville', 'Amiens', 'Montdidier', 'Péronne'],
                  'Seine-Maritime': ['Dieppe', 'Rouen'],
                  'Hill County': ['Havre'],
                  'Seine-et-Marne': ['Meaux', 'Melun', 'Provins', 'Fontainebleau'],
                  'Yvelines': ['Mantes-la-Jolie',
                    'Rambouillet',
                    'Saint-Germain-en-Laye',
                    'Versailles'],
                  'Deux-Sèvres': ['Bressuire', 'Niort', 'Parthenay'],
                  'Tarn': ['Albi'],
                  'Tarn-et-Garonne': ['Castelsarrasin', 'Montauban'],
                  'Var': ['Draguignan', 'Toulon', 'Brignoles'],
                  'Vaucluse': ['Apt', 'Avignon', 'Carpentras'],
                  'Vendée': ['Fontenay-le-Comte', 'Roche-sur-Yon', "Sables-d'Olonne"],
                  'Vienne': ['Châtellerault', 'Montmorillon', 'Poitiers'],
                  'Haute-Vienne': ['Bellac', 'Limoges', 'Rochechouart'],
                  'Vosges': ['Épinal', 'Neufchâteau', 'Saint-Dié-des-Vosges'],
                  'Yonne': ['Auxerre', 'Avallon', 'Sens', 'Évry'],
                  'Essonne': ['Étampes', 'Palaiseau'],
                  'Hauts-de-Seine': ['Antony', 'Nanterre', 'Boulogne-Billancourt'],
                  'Seine-Saint-Denis': ['Bobigny', 'Raincy', 'Saint-Denis', 'Saint-Denis'],
                  'Val-de-Marne': ['Créteil', 'Nogent-sur-Marne', 'Haÿ-les-Roses'],
                  "Val-d'Oise": ['Argenteuil', 'Sarcelles', 'Pontoise'],
                  'Marin County': ['Marin'],
                  'Ramsey County': ['Saint-Paul'],
                  'Territoire de Belfort': ['Belfort']
                  }


import joblib
boost_classifier = joblib.load('models\\city_models\\boost_classifier.pkl')
svm_classifier = joblib.load('models\\city_models\\svm_classifier.pkl')
classifier = joblib.load('models\\city_models\\log_classifier.pkl')
adaboost_classifier = joblib.load('models\\city_models\\adaboost_classifier.pkl')
lda_classifier = joblib.load('models\\city_models\\lda_classifier.pkl')
sgd_classifier = joblib.load('models\\city_models\\sgd_classifier.pkl')

def city_ensemble_classifier_predict(X_val):
    ensemble_predictions = []
    all_predictions = [classifier.predict(X_val), adaboost_classifier.predict(X_val), svm_classifier.predict(X_val), boost_classifier.predict(X_val), lda_classifier.predict(X_val), sgd_classifier.predict(X_val)]
    for i in range(len(X_val)):
        sample_predictions = [pred[i] for pred in all_predictions]
        counts = np.bincount(sample_predictions)
        mode_prediction = np.argmax(counts)
        ensemble_predictions.append(mode_prediction)
    ensemble_predictions = np.array(ensemble_predictions)
    return ensemble_predictions

country_boost_classifier = joblib.load('models\\countryside_models\\boost_classifier.pkl')
country_svm_classifier = joblib.load('models\\countryside_models\\svm_classifier.pkl')
country_classifier = joblib.load('models\\countryside_models\\log_classifier.pkl')
country_adaboost_classifier = joblib.load('models\\countryside_models\\adaboost_classifier.pkl')
country_lda_classifier = joblib.load('models\\countryside_models\\lda_classifier.pkl')
country_sgd_classifier = joblib.load('models\\countryside_models\\sgd_classifier.pkl')

def country_ensemble_classifier_predict(X_val):
    ensemble_predictions = []
    all_predictions = [country_classifier.predict(X_val), country_adaboost_classifier.predict(X_val), country_svm_classifier.predict(X_val), country_boost_classifier.predict(X_val), country_lda_classifier.predict(X_val), country_sgd_classifier.predict(X_val)]
    for i in range(len(X_val)):
        sample_predictions = [pred[i] for pred in all_predictions]
        counts = np.bincount(sample_predictions)
        mode_prediction = np.argmax(counts)
        ensemble_predictions.append(mode_prediction)
    ensemble_predictions = np.array(ensemble_predictions)
    return ensemble_predictions




def franco_predict(image):
    inputs = processor(scenery_descriptors, images=image, return_tensors="pt", padding=True)
    with torch.no_grad():
        outputs = model(**inputs)
        features = outputs['image_embeds']


        if outputs.logits_per_image[0][0]>= outputs.logits_per_image[0][1]:        #We are now in the urban setting
            prediction = city_ensemble_classifier_predict(np.array(features))
            city = city_descriptions[prediction[0]]
            return city
        
        else:       #Rural setting
            prediction = country_ensemble_classifier_predict(np.array(features))
            county = country_descriptions[prediction[0]]
            arrond = arrondissements[county].copy()
            if len(arrond)>1:
                arrond.append(scenery_descriptors[0])
                arrond.append(scenery_descriptors[1])
                text_inputs = processor(arrond, return_tensors="pt", padding=True)
                text_embeds = model.get_text_features(**text_inputs)
                return arrond[torch.argmax((text_embeds@features.T)[:-2])] + ', ' + county
            return county
        
                
